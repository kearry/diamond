// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  repositories  Repository[] // Added for repositories
  issues        Issue[]      // Link to Issues
  comments      Comment[]    // Link to Comments
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Repository Model
model Repository {
  id        String   @id @default(cuid())
  name      String
  githubId  String   @unique // GitHub repository ID
  isEnabled Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  issues    Issue[]  // Link to Issues
}

// Issue Model
model Issue {
  id               String    @id @default(cuid())
  repository       Repository @relation(fields: [repositoryId], references: [id])
  repositoryId     String
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  type             String    // e.g., "Logic bug", "Security issue"
  description      String
  codeSnippet      String?    // JSON string, or text
  lineNumberStart  Int?
  lineNumberEnd    Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  resolved         Boolean   @default(false) // Track if the issue is resolved
  comments         Comment[] // Link to Comments

}

// Comment Model (if you add a comment feed)
model Comment {
    id          String @id @default(cuid())
    issue       Issue @relation(fields: [issueId], references: [id])
    issueId     String
    user        User @relation(fields: [userId], references: [id])
    userId      String
    text        String
    createdAt   DateTime @default(now())
}